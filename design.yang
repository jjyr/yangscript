a = 1
#global
a = fun(x, b) -> x + b;

b = [1,2,3].map(f)
a, b = [b, a, 3]
# a=> b, b=> a
a,_, b = [b, a, 3]
# a=> b, b=> 3

b[1]
b[1, 4]
b[1, -1] = 1
"asdasdasd"
#defined?
has(b,1)
result, value = has_get(b, 1)
#while a
#;

#keys(b) == keys(b, false)
#keys(b, true)
#get(b, 1)
#set(b, 1)
#b.xxx
#nil
global.test_func = fun(a, b) ->
  a = clone(a)
  for k in keys(b)
    if v = b.get(k)
      a.set(k, b)
    ;
  ;
;

class Person
  #include(Object)
  include(BasePerson)
#self == Person
  merge(self, {
    hello: fun(self) -> puts("hello every one!");,
    init: fun(self) -> puts("i'm initialized"),
    say: fun(self) ->
      if super.say
        super.say(self)
        #super == BasePerson
      else
        puts("nothing")
      ;
  })
;

true
false
nil
person = Person()
person.favorite_programing_language ||= "yang"
person.inherited_method # -> Person -> BasePerson -> Object
(person.nihao || person.hello)()
