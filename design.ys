a = 1
#global
a = (x, b) -> x + b;

b = [1,2,3].map(a)
a, b = b, a, 3
# a=> b, b=> a
a,_, b = b, a, 3
# a=> b, b=> 3

b[1]
b[1, 4]
b[1, -1] = 1
"asdasdasd"

dict = {a:1, b:2}
dict["a"] #=>1
#dict.a error, not attribute
has(b,1)
result, value = has_get(b, 1)
#while a
#;

#keys(b) == keys(b, false)
#keys(b, true)
#get(b, 1)
#set(b, 1)
#b.xxx
#nil
def test_func(a, b) ->
  a = clone(a)
  for k in keys(b)
    v = b.get(k)
    if v
    elsif a
    else
      a.set(k, b)
    ;
  ;
;

test_func = ()->;

class Person
  #include(Object)
  include(BasePerson)

  def init(self) ->
    puts("called when object created")
    self.words_to_say = "nice to meet you!"
  ;

  def hello(self) -> puts("hello every one!");

  def say(self) ->
    if super.say
      super.say(self.words_to_say)
      #super == BasePerson
    else
      puts("nothing")
    ;
  ;
;

true
false
nil
person = Person()
person.favorite_programing_language ||= "yang"
person.inherited_method # -> Person -> BasePerson -> Object
(person.nihao || person.hello)()
